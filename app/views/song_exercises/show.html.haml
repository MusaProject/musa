.slide.song-exercise
  .container.clearfix
    .grid_12
      %h1.left
        = @exercise.exercise.name
      %h3.right
        Level:
        %span=@exercise.song.level

      %h3.right
        Score:
        %span.score 0
  .row
    .large-2.columns
      = link_to 'Play', '#', id: 'play', class:''
      %br
      = link_to 'Stop', '#', id: 'stop', class: ''
    .large-7.columns
      .blur
      #video
    %table.answers.large-2.columns
      %thead
        %tr
          %th Correct Answer
          %th Your Answer
      %tbody

  .lyric.row
    - @exercise.parse_lyric.each_with_index do |line,i|
      - unless line.blank?
        - blank = line.scan(/\[(.*?)\]/)
        %p.large-8.columns.large-centered{"data-line"=>"#{i}",
          "data-ans_n"=> "#{blank.count}",
          "data-ans"=>"#{blank.join(',')}",
          class: "#{i == 0 ? 'current': ''} #{blank.empty? ? '' : 'blank'}"}
          #{raw line.gsub(/\[(.*?)\]/, "<input type='text' id='#{i}' class='blank-input large-3 columns' disabled/>")}

:coffee
  $ ->
  VIDEO =

    subtitleID: 0
    continue: 0
    timeOut: ''
    addSubtitle: (start, end, subtitle) ->
      window.pop.cue end, ->
        VIDEO.subtitleID += 1
        current = $('.current')
        VIDEO.checkBlank current


    #function to actually display the subtitle
    displaySubtitle: (current, index) ->
      lineNumber = index
      lineHeight = parseInt($('.lyric p').css('line-height'))
      #console.log lineNumber
      $('.lyric').scrollTop(lineNumber * lineHeight)

      inputs = current.find('input')
      $.each inputs, (i, input) ->
        $(input).attr('disabled', 'disabled')

      current.find()
      next = current.next()
      next.addClass 'current'
      current.removeClass 'current'

    checkBlank: (current) ->
      if current.hasClass 'blank'
        window.pop.pause()
        VIDEO.enableInputs current
        VIDEO.timeOut = setTimeout (->
          VIDEO.reviewAnswer current.find('input').first()
          VIDEO.nextLine current
        ), 10000
      else
        VIDEO.displaySubtitle current, VIDEO.subtitleID

    enableInputs: (current) ->
      inputs = current.find('input')
      $.each inputs, (i, input) ->
        $(input).removeAttr('disabled')
        if i == 0
          $(input).focus()

    nextLine: (current) ->
      window.pop.play()
      VIDEO.displaySubtitle current, VIDEO.subtitleID

    updateScore: ()->
      value = parseInt("#{5}")
      total_ans = $('.correct').length
      total_score = total_ans * value
      $('.score').text total_score
      actual_op = $('.blur').css('opacity')

      opacity_total = 1 / window.blanks
      opacity = (total_ans * opacity_total)
      #console.log opacity
      $('.blur').css('opacity',1 - opacity)

    reviewAnswer: (input) ->

      active_input = $(input)
      line = active_input.parents('.current')
      correct_ans = line.data('ans')
      ans = active_input.val().toLowerCase()
      active_input.attr('disabled', 'disabled')
      correct = ''
      unless correct_ans is undefined
        if ans == correct_ans
          active_input.addClass('correct')
          correct = 'check'
          VIDEO.updateScore()
        else
          active_input.addClass('fail')
          correct = ''
        $('.answers tbody').append("<tr><td>"+correct_ans+"</td><td class='user-ans "+correct+"'>"+ans+"</td></tr>")


    inputDone: (input) ->
      clearTimeout VIDEO.timeOut
      active_input = $(input[0])
      line = active_input.parents('.current')
      ans_n = $(line).data('ans_n')
      #console.log line
      if ans_n > 1
        active_input.next('.blank-input').focus()
      else
        VIDEO.reviewAnswer active_input
        VIDEO.continue = 1
        VIDEO.nextLine line


  document.addEventListener "DOMContentLoaded", (->
    window.pop = Popcorn.youtube( "#video", "#{@exercise.song.url}" )

    window.blanks = $('.blank-input').length
    lines = JSON.parse("#{escape_javascript @exercise.song.subtitles}")
    $.each lines, (i,key) ->
      VIDEO.addSubtitle(key['start'], key['end'], key['line'])
      console.log key['start']

    $('.blank-input').on 'keypress', (e) ->
      code = e.keyCode || e.which
      if code == 13
        VIDEO.inputDone $(e.target)

    $('#play').on 'click', (e) ->
      e.preventDefault()
      window.pop.play()

    $('#stop').on 'click', (e) ->
      e.preventDefault()
      window.location.reload()

  ), false

